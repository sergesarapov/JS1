{"version":3,"sources":["Board.js","Game.js","Main.js","Status.js"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AChDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACrDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACVA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"../script.js","sourcesContent":["class Board {\r\n  constructor() {\r\n    this.gameTableElement = document.getElementById(\"game\");\r\n  }\r\n\r\n  init(game, status) {\r\n    this.game = game;\r\n    this.status = status;\r\n  }\r\n\r\n  renderMap() {\r\n    for (let row = 0; row < 3; row++) {\r\n      const tr = document.createElement(\"tr\");\r\n      this.gameTableElement.appendChild(tr);\r\n      for (let col = 0; col < 3; col++) {\r\n        let td = document.createElement(\"td\");\r\n        td.dataset.row = row.toString();\r\n        td.dataset.col = col.toString();\r\n        tr.appendChild(td);\r\n      }\r\n    }\r\n  }\r\n\r\n  initEventHandlers() {\r\n    this.gameTableElement.addEventListener(\"click\", (event) =>\r\n      this.game.cellClickHandler(event)\r\n    );\r\n  }\r\n\r\n  isClickByCell(event) {\r\n    return event.target.tagName === \"TD\";\r\n  }\r\n\r\n  isCellEmpty(event) {\r\n    let row = +event.target.dataset.row;\r\n    let col = +event.target.dataset.col;\r\n\r\n    return this.status.mapValues[row][col] === \"\";\r\n  }\r\n\r\n  fillCell(event) {\r\n    let row = +event.target.dataset.row;\r\n    let col = +event.target.dataset.col;\r\n\r\n    this.status.mapValues[row][col] = this.status.phase;\r\n    event.target.textContent = this.status.phase;\r\n  }\r\n}\r\n","class Game {\r\n  init(status, board) {\r\n    this.board = board;\r\n    this.status = status;\r\n  }\r\n\r\n  cellClickHandler(event) {\r\n    if (!this.isCorrectClick(event)) {\r\n      return;\r\n    }\r\n\r\n    this.board.fillCell(event);\r\n    if (this.hasWon()) {\r\n      this.status.setStatusStopped();\r\n      this.sayWonPhrase();\r\n    }\r\n    this.status.togglePhase();\r\n  }\r\n\r\n  isCorrectClick(event) {\r\n    return (\r\n      this.status.isStatusPlaying() &&\r\n      this.board.isClickByCell(event) &&\r\n      this.board.isCellEmpty(event)\r\n    );\r\n  }\r\n\r\n  hasWon() {\r\n    return (\r\n      this.isLineWon({ x: 0, y: 0 }, { x: 1, y: 0 }, { x: 2, y: 0 }) ||\r\n      this.isLineWon({ x: 0, y: 1 }, { x: 1, y: 1 }, { x: 2, y: 1 }) ||\r\n      this.isLineWon({ x: 0, y: 2 }, { x: 1, y: 2 }, { x: 2, y: 2 }) ||\r\n      this.isLineWon({ x: 0, y: 0 }, { x: 0, y: 1 }, { x: 0, y: 2 }) ||\r\n      this.isLineWon({ x: 1, y: 0 }, { x: 1, y: 1 }, { x: 1, y: 2 }) ||\r\n      this.isLineWon({ x: 2, y: 0 }, { x: 2, y: 1 }, { x: 2, y: 2 }) ||\r\n      this.isLineWon({ x: 0, y: 0 }, { x: 1, y: 1 }, { x: 2, y: 2 }) ||\r\n      this.isLineWon({ x: 0, y: 2 }, { x: 1, y: 1 }, { x: 2, y: 0 })\r\n    );\r\n  }\r\n\r\n  isLineWon(a, b, c) {\r\n    let value =\r\n      this.status.mapValues[a.y][a.x] +\r\n      this.status.mapValues[b.y][b.x] +\r\n      this.status.mapValues[c.y][c.x];\r\n    return value === \"XXX\" || value === \"000\";\r\n  }\r\n\r\n  sayWonPhrase() {\r\n    let figure = this.status.phase === \"X\" ? \"Крестики\" : \"Нолики\";\r\n    alert(`${figure} выиграли!`);\r\n  }\r\n}\r\n","window.addEventListener(\"load\", function () {\r\n  const game = new Game();\r\n  const board = new Board();\r\n  const status = new Status();\r\n\r\n  board.init(game, status);\r\n  game.init(status, board);\r\n  board.renderMap();\r\n  board.initEventHandlers();\r\n});\r\n","class Status {\r\n  constructor() {\r\n    this.status = \"playing\";\r\n    this.mapValues = [\r\n      [\"\", \"\", \"\"],\r\n      [\"\", \"\", \"\"],\r\n      [\"\", \"\", \"\"],\r\n    ];\r\n    this.phase = \"X\";\r\n  }\r\n\r\n  isStatusPlaying() {\r\n    return this.status === \"playing\";\r\n  }\r\n\r\n  setStatusStopped() {\r\n    this.status = \"stopped\";\r\n  }\r\n\r\n  togglePhase() {\r\n    this.phase = this.phase === \"X\" ? \"0\" : \"X\";\r\n  }\r\n}\r\n"]}